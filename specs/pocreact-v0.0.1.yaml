openapi: "3.0.0"
info:
  title: Openapi Generator Example
  version: 0.0.1-SNAPSHOT

tags:
  - Simple
  - Complex

paths:
  /v1/public/simple-list:
    get:
      tags:
        - Simple
      operationId: listSimple
      summary: List API of SimpleModel
      parameters: []
      responses:
        '200':
          description: |-
            200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimpleModel'
  /v1/public/simple-page-base:
    get:
      tags:
        - Simple
      operationId: paginateSimpleBase
      summary: Pagination API of SimpleModel
      # Reference:
      # https://swagger.io/docs/specification/describing-parameters
      parameters:
##        - $ref: '#/components/parameters/pageParam'
##        - $ref: '#/components/parameters/sizeParam'
##        - $ref: '#/components/parameters/sortParam'
#        - $ref: './base-model-v0.0.1.yaml#/components/parameters/pageParam'
#        - $ref: './base-model-v0.0.1.yaml#/components/parameters/sizeParam'
#        - $ref: './base-model-v0.0.1.yaml#/components/parameters/sortParam'
        - in: query
          name: pageable
          required: false
          schema:
#            $ref: '#/components/schemas/Pageable'
            # Reference:
            # https://stackoverflow.com/a/58933221
            $ref: './base-model-v0.0.1.yaml#/components/schemas/Pageable'
##            type: Pageable
#            type: pageable
      responses:
        '200':
          description: |-
            200 response
          content:
            application/json:
              schema:
##                type: object
##                allOf:
###                  - $ref: '#/components/schemas/PageResult'
##                  - $ref: './base-model-v0.0.1.yaml#/components/schemas/PageResult'
##                  - type: object
##                    properties:
##                      content:
##                        type: array
##                        items:
##                          $ref: '#/components/schemas/SimpleModel'
#                $ref: '#/components/schemas/SimplePage'
                $ref: '#/components/schemas/PageResult'
  /v1/public/simple-page-spring:
    get:
      tags:
        - Simple
      operationId: paginateSimpleSpring
      summary: Pagination API of SimpleModel
      parameters:
        - in: query
          name: pageable
          required: false
          schema:
            $ref: './base-model-v0.0.1.yaml#/components/schemas/Pageable'
#            type: Pageable
      responses:
        '200':
          description: |-
            200 response
          content:
            application/json:
              schema:
                type: Page
  /v1/public/simple-page-disc:
    get:
      tags:
        - Simple
      operationId: paginateSimpleDisc
      summary: Pagination API of SimpleModel
      parameters:
        - in: query
          name: pageable
          required: false
          schema:
            $ref: './base-model-v0.0.1.yaml#/components/schemas/Pageable'
#            type: Pageable
      responses:
        '200':
          description: |-
            200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscPageResult'
  /v1/public/complex-page-base:
    get:
      tags:
        - Complex
      operationId: paginateComplexBase
      summary: Pagination API of ComplexModel
      parameters:
        - in: query
          name: pageable
          required: false
          schema:
#            $ref: './base-model-v0.0.1.yaml#/components/schemas/Pageable'
            type: Pageable
      responses:
        '200':
          description: |-
            200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResult'
  /v1/public/complex-page-disc:
    get:
      tags:
        - Complex
      operationId: paginateComplexDisc
      summary: Pagination API of ComplexModel
      parameters:
        - in: query
          name: pageable
          required: false
          schema:
#            $ref: './base-model-v0.0.1.yaml#/components/schemas/Pageable'
            type: Pageable
      responses:
        '200':
          description: |-
            200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscPageResult'

components:
  # Reference:
  # inheritance and polymorphism!!!
  # https://swagger.io/docs/specification/data-models/inheritance-and-polymorphism/
  schemas:
#    # Reference:
#    # https://medium.com/learning-from-jhipster/21-controller-service-repository的建立-2-pageable-sort-的使用與-swagger-的設定-f3dc2a1b772d
#    Pageable:
#      type: object
#      properties:
#        page:
#          type: integer
#        size:
#          type: integer
#        sort:
#          type: array
#          items:
#            type: string
#            default: field1,asc
#    PageResult:
#      type: object
#      properties:
#        totalElements:
#          type: integer
#          format: int32
#        totalPages:
#          type: integer
#          format: int32
#        content:
#          type: array
#          items:
#            type: object
#    BaseIntModel:
#      type: object
#      required:
#        - id
#        - versionNo
#      properties:
#        id:
#          type: integer
#          format: int32
#        versionNo:
#          type: integer
#          format: int32
#        createdBy:
#          type: string
#        createdDatetime:
#          type: string
#          format: date-time
#        lastModifiedBy:
#          type: string
#        lastModifiedDatetime:
#          type: string
#          format: date-time
    PageResult:
      allOf:
        - $ref: './base-model-v0.0.1.yaml#/components/schemas/BasePageResult'
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/DiscPageModel'
    #
    # Set up the discriminator in PageMode to make the returned content list specific, failed.
    # Returned content list is required to re-cast before return.
    DiscPageModel:
      allOf:
        - $ref: './base-model-v0.0.1.yaml#/components/schemas/BasePageModel'
#        - discriminator:
#            propertyName: pageModelType
#            mapping:
#              simpleModel: '#/components/schemas/SimpleModel'
#              complexModel: '#/components/schemas/ComplexModel'
#    discriminator:
#      propertyName: pageContentType
#      mapping:
#        simpleModel: '#/components/schemas/SimpleModel'
#      type: object
#      properties:
#        pageContentType:
#          type: string
    SimpleModel:
#      type: object
      # The first $ref object will be used super class
      # when openapiNormalizer.set(["REF_AS_PARENT_IN_ALLOF": "true"]) is enabled in build.gradle
      allOf:
#        - $ref: '#/components/schemas/BaseIntModel'
        - $ref: '#/components/schemas/DiscPageModel'
        - $ref: './base-model-v0.0.1.yaml#/components/schemas/BaseIntModel'
        - type: object
          required:
            - type
            - title
          properties:
            type:
              type: string
            title:
              type: string
            date:
              type: string
              format: date
            time:
              type: string
              format: time
#    SimplePage:
#      type: object
#      allOf:
##        - $ref: '#/components/schemas/PageResult'
#        - $ref: './base-model-v0.0.1.yaml#/components/schemas/PageResult'
#        - type: object
#          properties:
#            content:
#              type: array
#              items:
#                $ref: '#/components/schemas/SimpleModel'
    ComplexModel:
      allOf:
        - $ref: '#/components/schemas/DiscPageModel'
        - $ref: './base-model-v0.0.1.yaml#/components/schemas/BaseIntModel'
        - type: object
          required:
            - type
            - title
          properties:
            type:
              type: string
            simpleA:
              $ref: '#/components/schemas/SimpleModel'
            simpleB:
              $ref: '#/components/schemas/SimpleModel'
    #
    # Set up the discriminator in PageResult to make the returned content list specific.
    DiscPageResult:
      allOf:
        - $ref: './base-model-v0.0.1.yaml#/components/schemas/BasePageResult'
#        - discriminator:
#            propertyName: pageModelType
#            mapping:
#              simpleModel: '#/components/schemas/SimpleDiscPageResult'
#              complexModel: '#/components/schemas/ComplexDiscPageResult'
    SimpleDiscPageResult:
      allOf:
        - $ref: '#/components/schemas/DiscPageResult'
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/SimpleModel'
    ComplexDiscPageResult:
      allOf:
        - $ref: '#/components/schemas/DiscPageResult'
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/ComplexModel'


#  # Reference:
#  # https://medium.com/learning-from-jhipster/21-controller-service-repository%E7%9A%84%E5%BB%BA%E7%AB%8B-2-pageable-sort-%E7%9A%84%E4%BD%BF%E7%94%A8%E8%88%87-swagger-%E7%9A%84%E8%A8%AD%E5%AE%9A-f3dc2a1b772d
#  # https://medium.com/learning-from-jhipster/21-controller-service-repository的建立-2-pageable-sort-的使用與-swagger-的設定-f3dc2a1b772d
#  parameters:
#    pageParam:
#      name: page
#      in: query
#      description: Results page you want to retrieve (0..N)
#      required: false
#      schema:
#        type: integer
#        format: int32
#        minimum: 0
#        default: 0
#    sizeParam:
#      name: size
#      in: query
#      description: Number of records per page
#      required: false
#      schema:
#        type: integer
#        format: int32
#        minimum: 1
#        maximum: 100
#        default: 20
#    sortParam:
#      name: sort
#      in: query
#      description: |
#        Sorting criteria in the format: property(,asc|desc).
#        Default sort order is ascending.
#        Multiple sort criteria are supported.
#      required: false
#      schema:
#        type: array
#        items:
#          type: string
#          default: field1,asc



